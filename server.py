import SimpleHTTPServerimport SocketServerimport cgifrom StringIO import StringIOimport loggingfrom opmlhandler import OpmlHandlerlogging.basicConfig(level=logging.INFO)PORT = 8000class ServerHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):  def do_GET(self):    self.wfile.write("hellooo")    self.send_response(200)  def do_POST(self):    ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))        logging.info("Received a post request")    # unpack the incoming params    postvars = None    if ctype == 'multipart/form-data':      postvars = cgi.parse_multipart(self.rfile, pdict)      logging.info("parsed parameters as multipart/form-data")    elif ctype == 'application/x-www-form-urlencoded':      length = int(self.headers.getheader('content-length'))      postvars = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)      logging.info("parsed parameters as application/x-www-form-urlencoded")    else:      postvars = {}        # instantiate my handler for later processing    logging.debug("Incoming parameters: " + str(postvars))    opmlStr = postvars['fileupload'][0]    opml_handler = OpmlHandler(opmlStr)    userid = postvars['userid'][0]    logging.info("Request from user: %s" % postvars['userid'][0])        # send the response, close the connection so the client isn't waiting    self.send_head()    self.send_response(200, "OK")    self.finish()    self.connection.close()    # process the file    opml_handler.process(userid)Handler = ServerHandlerhttpd = SocketServer.TCPServer(("", PORT), Handler)logging.info("Serving it up on port: %d" % PORT)httpd.serve_forever()